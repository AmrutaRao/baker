{
    "docs": [
        {
            "location": "/", 
            "text": "Introduction\n\n\nIn this development documention everything should be found that is needed for developers to get started with Baker.\n\n\nThis is also a good start point for anyone that just want to know more about Baker.", 
            "title": "Home"
        }, 
        {
            "location": "/#introduction", 
            "text": "In this development documention everything should be found that is needed for developers to get started with Baker.  This is also a good start point for anyone that just want to know more about Baker.", 
            "title": "Introduction"
        }, 
        {
            "location": "/migration_guide/", 
            "text": "Migration Guide\n\n\nFrom 1.3.x to 2.0.0\n\n\nThis guide only describes how to migrate your existing application.\n\n\nSummary:\n\n\n\n\nALL\n persisted data from baker \n1.3.x\n \nIS COMPATIBLE\n and can be used with \n2.0.0\n\n\nWhen running a cluster \nDOWNTIME IS REQUIRED\n because of binary incompatible changes in the message protocol.\n\n\nSome small code refactors are necessary (see below).\n\n\n\n\nFor a full list new features see the \nchangelog\n.\n\n\nDowntime required for clusters with state\n\n\nIn \n2.0.0\n some binary incompatible changes where made in the message protocol.\n\n\nThis requires you to bring down the entire cluster (\n1.3.x\n) and bring it up again (\n2.0.0\n).\n\n\nA rolling deploy \nIS NOT\n tested and \nNOT\n recommended.\n\n\nRemoved Ingredient interface\n\n\ncom.ing.baker.recipe.javadsl.Ingredient\n was removed.\n\n\nThis was a tagging interface that was not used in the project.\n\n\nYou can remove all references to this interface in your project.\n\n\nOne thing to note is that \nIngredient\n extended from \nscala.Serializable\n.\n\n\nIf you depended on this behaviour just replace \nIngredient\n by \nscala.Serializable\n.\n\n\n@ProvidesIngredient removed\n\n\nIn \n1.3.x\n you could directly provide an ingredient from an interaction. For example:\n\n\nimport\n \ncom.ing.baker.recipe.annotations.ProvidesIngredient\n;\n\n\n\ninterface\n \nGetEmail\n \n{\n\n\n  \n@ProvidesIngredient\n(\nemail\n)\n\n  \nString\n \napply\n(\n@RequiresIngredient\n(\ncustomer\n)\n \nCustomer\n \ncustomer\n);\n\n\n}\n\n\n\n\n\nThis feature has been removed. Internally this was already translated to an implicitly generated event: \n$interactionName + Successful\n.\n\n\nNow it is required that you do this expclitly to avoid confusion.\n\n\nThe refactor is very straight forwfard:\n\n\nimport\n \ncom.ing.baker.recipe.annotations.FiresEvent\n;\n\n\n\ninterface\n \nGetEmail\n \n{\n\n\n  \npublic\n \nclass\n \nGetEmailSuccessful\n \n{\n\n    \npublic\n \nfinal\n \nString\n \nemail\n;\n\n    \npublic\n \nExampleInteractionSuccessful\n(\nString\n \nemail\n)\n \n{\n\n      \nthis\n.\nemail\n \n=\n \nemail\n;\n\n    \n}\n\n  \n}\n\n\n  \n@FiresEvent\n(\noneOf\n \n=\n \n{\n \nGetEmailSuccessful\n.\nclass\n \n}\n \n)\n\n  \nGetEmailSuccessful\n \napply\n(\n@RequiresIngredient\n(\ncustomer\n)\n \nCustomer\n \ncustomer\n);\n\n\n}\n\n\n\n\n\nIf you use \nlombok\n annotations you can get rid of a lot of the boiler plate by using \n@Value\n on the event class.\n\n\nIn \nscala\n it is recommended to use case classes.", 
            "title": "Migration Guide"
        }, 
        {
            "location": "/migration_guide/#migration-guide", 
            "text": "", 
            "title": "Migration Guide"
        }, 
        {
            "location": "/migration_guide/#from-13x-to-200", 
            "text": "This guide only describes how to migrate your existing application.  Summary:   ALL  persisted data from baker  1.3.x   IS COMPATIBLE  and can be used with  2.0.0  When running a cluster  DOWNTIME IS REQUIRED  because of binary incompatible changes in the message protocol.  Some small code refactors are necessary (see below).   For a full list new features see the  changelog .", 
            "title": "From 1.3.x to 2.0.0"
        }, 
        {
            "location": "/migration_guide/#downtime-required-for-clusters-with-state", 
            "text": "In  2.0.0  some binary incompatible changes where made in the message protocol.  This requires you to bring down the entire cluster ( 1.3.x ) and bring it up again ( 2.0.0 ).  A rolling deploy  IS NOT  tested and  NOT  recommended.", 
            "title": "Downtime required for clusters with state"
        }, 
        {
            "location": "/migration_guide/#removed-ingredient-interface", 
            "text": "com.ing.baker.recipe.javadsl.Ingredient  was removed.  This was a tagging interface that was not used in the project.  You can remove all references to this interface in your project.  One thing to note is that  Ingredient  extended from  scala.Serializable .  If you depended on this behaviour just replace  Ingredient  by  scala.Serializable .", 
            "title": "Removed Ingredient interface"
        }, 
        {
            "location": "/migration_guide/#providesingredient-removed", 
            "text": "In  1.3.x  you could directly provide an ingredient from an interaction. For example:  import   com.ing.baker.recipe.annotations.ProvidesIngredient ;  interface   GetEmail   { \n\n   @ProvidesIngredient ( email ) \n   String   apply ( @RequiresIngredient ( customer )   Customer   customer );  }   This feature has been removed. Internally this was already translated to an implicitly generated event:  $interactionName + Successful .  Now it is required that you do this expclitly to avoid confusion.  The refactor is very straight forwfard:  import   com.ing.baker.recipe.annotations.FiresEvent ;  interface   GetEmail   { \n\n   public   class   GetEmailSuccessful   { \n     public   final   String   email ; \n     public   ExampleInteractionSuccessful ( String   email )   { \n       this . email   =   email ; \n     } \n   } \n\n   @FiresEvent ( oneOf   =   {   GetEmailSuccessful . class   }   ) \n   GetEmailSuccessful   apply ( @RequiresIngredient ( customer )   Customer   customer );  }   If you use  lombok  annotations you can get rid of a lot of the boiler plate by using  @Value  on the event class.  In  scala  it is recommended to use case classes.", 
            "title": "@ProvidesIngredient removed"
        }, 
        {
            "location": "/documentation/compiler/", 
            "text": "Recipe compiler\n\n\nThis documentation is for developers of Bakers and others who might be interested about the internal mechanics.\n\n\nIntroduction\n\n\nA recipe can be represented (and \nvisualization\n) as a graph.\n\n\nIt can be seen as a higher level representation of a petri net (which is also a graph)\n\n\nThe recipe compiler takes a recipe and creates a petri net.\n\n\nGenerally the petri net is graph more complicated with extra layers of wiring nodes.\n\n\nTranslation rules\n\n\nThe compiler has some rules about translating recipe parts to \ntransitions\n and \nplaces\n in the petri net.\n\n\nIngredient used by multiple interactions\n\n\nOften an ingredient will be used by multiple interactions in a recipe.\n\n\nBecause tokens can only be consumed by 1 transition we have to add a layer to duplicate the token for all transitions.\n\n\n\n\nInteraction with precondition (AND)\n\n\nBy default event preconditions use an AND combinator. In the petri net this means that each event transition has\nto produce a token in a place for that interaction.\n\n\n\n\nInteraction with precodition (OR)\n\n\nEvents that are grouped in an OR combinator for an interaction output a token to the same place.\n\n\nTherefor when one of them fires the condition for the transition to fire is met.\n\n\n\n\nSensory event with firing limit\n\n\nWhen specifying a sensory event with a firing limit of \nn\n we generate a in-adjacent place with \nn\n tokens in the\ninitial marking.", 
            "title": "Recipe compiler"
        }, 
        {
            "location": "/documentation/compiler/#recipe-compiler", 
            "text": "This documentation is for developers of Bakers and others who might be interested about the internal mechanics.", 
            "title": "Recipe compiler"
        }, 
        {
            "location": "/documentation/compiler/#introduction", 
            "text": "A recipe can be represented (and  visualization ) as a graph.  It can be seen as a higher level representation of a petri net (which is also a graph)  The recipe compiler takes a recipe and creates a petri net.  Generally the petri net is graph more complicated with extra layers of wiring nodes.", 
            "title": "Introduction"
        }, 
        {
            "location": "/documentation/compiler/#translation-rules", 
            "text": "The compiler has some rules about translating recipe parts to  transitions  and  places  in the petri net.", 
            "title": "Translation rules"
        }, 
        {
            "location": "/documentation/compiler/#ingredient-used-by-multiple-interactions", 
            "text": "Often an ingredient will be used by multiple interactions in a recipe.  Because tokens can only be consumed by 1 transition we have to add a layer to duplicate the token for all transitions.", 
            "title": "Ingredient used by multiple interactions"
        }, 
        {
            "location": "/documentation/compiler/#interaction-with-precondition-and", 
            "text": "By default event preconditions use an AND combinator. In the petri net this means that each event transition has\nto produce a token in a place for that interaction.", 
            "title": "Interaction with precondition (AND)"
        }, 
        {
            "location": "/documentation/compiler/#interaction-with-precodition-or", 
            "text": "Events that are grouped in an OR combinator for an interaction output a token to the same place.  Therefor when one of them fires the condition for the transition to fire is met.", 
            "title": "Interaction with precodition (OR)"
        }, 
        {
            "location": "/documentation/compiler/#sensory-event-with-firing-limit", 
            "text": "When specifying a sensory event with a firing limit of  n  we generate a in-adjacent place with  n  tokens in the\ninitial marking.", 
            "title": "Sensory event with firing limit"
        }, 
        {
            "location": "/documentation/concepts/", 
            "text": "Concepts\n\n\nBaker introduces interactions, ingredients, and events as a model of abstracting. With these three components we can create recipes.\n\n\nThink about these in the context of a Bakery with a baker using ingeredients to bake a pizza\n\n\nIngredient\n\n\nIngredients are like the name implies the  ingredients that the Baker needs to execute the steps in the Recipe.\n\n\nIn our case Ingredients are the data that is needed and created by interactions.\n\n\nFor example to make a money transfer you need to know the IBANs of the two account numbers and the amount of money to be transferred\n\n\nInteraction\n\n\nAn interaction can be seen as any action the baker needs fulfil to take to finish his recipe.\n\n\nBaker is made for complex orchestrations so a interaction is any interaction with an outside system.\n\n\nAn interaction can be a call to internal or external system (can be an API, EMS service, etc.).\n\n\nThe goal of this call is to do work for us for example register a customer, send a present, or transfer money;", 
            "title": "Concepts"
        }, 
        {
            "location": "/documentation/concepts/#concepts", 
            "text": "Baker introduces interactions, ingredients, and events as a model of abstracting. With these three components we can create recipes.  Think about these in the context of a Bakery with a baker using ingeredients to bake a pizza", 
            "title": "Concepts"
        }, 
        {
            "location": "/documentation/concepts/#ingredient", 
            "text": "Ingredients are like the name implies the  ingredients that the Baker needs to execute the steps in the Recipe.  In our case Ingredients are the data that is needed and created by interactions.  For example to make a money transfer you need to know the IBANs of the two account numbers and the amount of money to be transferred", 
            "title": "Ingredient"
        }, 
        {
            "location": "/documentation/concepts/#interaction", 
            "text": "An interaction can be seen as any action the baker needs fulfil to take to finish his recipe.  Baker is made for complex orchestrations so a interaction is any interaction with an outside system.  An interaction can be a call to internal or external system (can be an API, EMS service, etc.).  The goal of this call is to do work for us for example register a customer, send a present, or transfer money;", 
            "title": "Interaction"
        }, 
        {
            "location": "/documentation/event-listener/", 
            "text": "Events\n\n\nSubscribing to internal events\n\n\nConsiderations\n\n\n\n\n\n\nEvent delivery is \nasynchronous\n, \nNO\n order guarantee is given\n\n\nAll events \ndo\n come with time stamps.\n\n\n\n\n\n\nEvent delivery is \nAT MOST ONCE\n\n\nIt is not recommended to use for primary business logic\n\n\n\n\n\n\nList of events\n\n\n\n\n\n\n\n\nclass\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nProcessCreated\n\n\nA process instance was created\n\n\n\n\n\n\nEventReceived\n\n\nA sensory event for a process instance was received\n\n\n\n\n\n\nEventRejected\n\n\nA sensory event for a process instance was rejected\n\n\n\n\n\n\nInteractionStarted\n\n\nAn interaction started executing\n\n\n\n\n\n\nInteractionCompleted\n\n\nAn interaction completed executing\n\n\n\n\n\n\nInteractionFailed\n\n\nAn interaction failed during execution\n\n\n\n\n\n\nRecipeAdded\n\n\nA Recipe was added\n\n\n\n\n\n\n\n\nSubscription mechanism\n\n\nYou can subscribe to these events by registering a listener to baker.\n\n\nIn scala \npartial functions\n are used.\n\n\nIn java you can register objects that have methods annotated with \n@Subscribe\n.\n\n\nFor example, registering a listener only interested in \nEventReceived\n:\n\n\n\n\n\n\nScala\n\n\nimport\n \ncom.ing.baker.runtime.core.events._\n\n\n\nval\n \nbaker\n:\n \ncom.ing.baker.runtime.core.Baker\n \n=\n \n???\n \n// initialize baker\n\n\n\nbaker\n.\nregisterListenerPF\n \n{\n\n\n    \ncase\n \ne\n:\n \nEventReceived\n \n=\n \n// ...\n\n\n}\n\n\n\n\n\n\nJava\n\n\nimport\n \ncom.ing.baker.runtime.core.events.*\n;\n\n\n\nclass\n \nSubscriber\n \n{\n\n\n   \n@Subscribe\n\n   \npublic\n \nvoid\n \nreceiveEventReceived\n(\nEventReceived\n \nevent\n)\n \n{\n\n      \n// ...\n\n   \n}\n\n\n}\n\n\n\ncom\n.\ning\n.\nbaker\n.\nruntime\n.\njava_api\n.\nJBaker\n \nbaker\n \n=\n \nnull\n;\n \n// initialize baker\n\n\n\nbaker\n.\nregisterEventListener\n(\nnew\n \nSubscriber\n());", 
            "title": "Events"
        }, 
        {
            "location": "/documentation/event-listener/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/documentation/event-listener/#subscribing-to-internal-events", 
            "text": "", 
            "title": "Subscribing to internal events"
        }, 
        {
            "location": "/documentation/event-listener/#considerations", 
            "text": "Event delivery is  asynchronous ,  NO  order guarantee is given  All events  do  come with time stamps.    Event delivery is  AT MOST ONCE  It is not recommended to use for primary business logic", 
            "title": "Considerations"
        }, 
        {
            "location": "/documentation/event-listener/#list-of-events", 
            "text": "class  description      ProcessCreated  A process instance was created    EventReceived  A sensory event for a process instance was received    EventRejected  A sensory event for a process instance was rejected    InteractionStarted  An interaction started executing    InteractionCompleted  An interaction completed executing    InteractionFailed  An interaction failed during execution    RecipeAdded  A Recipe was added", 
            "title": "List of events"
        }, 
        {
            "location": "/documentation/event-listener/#subscription-mechanism", 
            "text": "You can subscribe to these events by registering a listener to baker.  In scala  partial functions  are used.  In java you can register objects that have methods annotated with  @Subscribe .  For example, registering a listener only interested in  EventReceived :    Scala  import   com.ing.baker.runtime.core.events._  val   baker :   com.ing.baker.runtime.core.Baker   =   ???   // initialize baker  baker . registerListenerPF   { \n\n     case   e :   EventReceived   =   // ...  }    Java  import   com.ing.baker.runtime.core.events.* ;  class   Subscriber   { \n\n    @Subscribe \n    public   void   receiveEventReceived ( EventReceived   event )   { \n       // ... \n    }  }  com . ing . baker . runtime . java_api . JBaker   baker   =   null ;   // initialize baker  baker . registerEventListener ( new   Subscriber ());", 
            "title": "Subscription mechanism"
        }, 
        {
            "location": "/documentation/visualization/", 
            "text": "Visualization\n\n\nGenerate a .dot representation\n\n\nBaker can turn a recipe into a .dot representation. \n.dot\n is a notation for representing graphs.\n\n\n\n\n\n\nScala\n\n\nval\n \nrecipe\n \n=\n \nRecipeCompiler\n.\ncompileRecipe\n(\nExamples\n.\nwebshop\n.\nwebShopRecipe\n)\n\n\n\nprintln\n(\nrecipe\n.\ngetRecipeVisualization\n)\n\n\n\n\n\n\nJava\n\n\nfinal\n \nCompiledRecipe\n \nrecipe\n \n=\n \nRecipeCompiler\n.\ncompileRecipe\n(\nExamples\n.\nwebshop\n.\nwebShopRecipe\n);\n\n\n\nSystem\n.\nout\n.\nprintln\n(\nrecipe\n.\ngetRecipeVisualization\n);\n\n\n\n\n\n\nThis should output something like this:\n\n\ndigraph d {\n  A [label=\nHello\n]\n  B [label=\nWorld\n]\n  C [label=\nEveryone\n]\n  A -\n { B C }\n}\n\n\n\n\nStyle customization\n\n\nIt is possible to define a custom visual style for your recipes.\n\n\nTo do so you need to add some configuration in your \napplication.conf\n:\n\n\nbaker.visualization {\n  style = \ncustom\n\n  styles.custom = {\n     // place your style attributes here\n  }\n}\n\n\n\n\nPlease see the \ndefault\n theme in the \nreference.conf\n\nas an example.\n\n\nFor an overview on what is possible to configure check out the \ngraphviz\n documentation.\n\n\nThe only limitation we place is the \nshape\n attribute, which is hard coded for all elements in the graph.\nWe do this to garuantee some common visual base for all recipes.\n\n\nVisualize\n\n\nOnce you have a \n.dot\n representation there are various methods to visualize this.\n\n\nOnline\n\n\nYou can copy the .dot output and use the \nwebgraphviz.com\n.\n\n\nLocal\n\n\nTo generate an image locally you require the \ngraphviz\n tool. See \ngraphviz.org\n on how to\ninstall it. On mac you can use \nbrew\n.\n\n\nbrew install graphviz\n\n\n\n\nUsing the \ndot\n command you can then create an SVG by running:\n\n\ndot -v -Tsvg -O graph.dot\n\n\n\n\nIn application\n\n\nAlternatively you can use \ngraphviz-java\n to generate the SVG in your code:\n\n\nimport\n \nguru.nidi.graphviz.engine.\n{\nFormat\n,\n \nGraphviz\n}\n\n\nimport\n \nguru.nidi.graphviz.parse.Parser\n\n\n\nval\n \ng\n \n=\n \nParser\n.\nread\n(\nrecipe\n.\ngetRecipeVisualization\n)\n\n\nGraphviz\n.\nfromGraph\n(\ng\n).\nrender\n(\nFormat\n.\nSVG\n).\ntoString", 
            "title": "Visualization"
        }, 
        {
            "location": "/documentation/visualization/#visualization", 
            "text": "", 
            "title": "Visualization"
        }, 
        {
            "location": "/documentation/visualization/#generate-a-dot-representation", 
            "text": "Baker can turn a recipe into a .dot representation.  .dot  is a notation for representing graphs.    Scala  val   recipe   =   RecipeCompiler . compileRecipe ( Examples . webshop . webShopRecipe )  println ( recipe . getRecipeVisualization )    Java  final   CompiledRecipe   recipe   =   RecipeCompiler . compileRecipe ( Examples . webshop . webShopRecipe );  System . out . println ( recipe . getRecipeVisualization );    This should output something like this:  digraph d {\n  A [label= Hello ]\n  B [label= World ]\n  C [label= Everyone ]\n  A -  { B C }\n}", 
            "title": "Generate a .dot representation"
        }, 
        {
            "location": "/documentation/visualization/#style-customization", 
            "text": "It is possible to define a custom visual style for your recipes.  To do so you need to add some configuration in your  application.conf :  baker.visualization {\n  style =  custom \n  styles.custom = {\n     // place your style attributes here\n  }\n}  Please see the  default  theme in the  reference.conf \nas an example.  For an overview on what is possible to configure check out the  graphviz  documentation.  The only limitation we place is the  shape  attribute, which is hard coded for all elements in the graph.\nWe do this to garuantee some common visual base for all recipes.", 
            "title": "Style customization"
        }, 
        {
            "location": "/documentation/visualization/#visualize", 
            "text": "Once you have a  .dot  representation there are various methods to visualize this.", 
            "title": "Visualize"
        }, 
        {
            "location": "/documentation/visualization/#online", 
            "text": "You can copy the .dot output and use the  webgraphviz.com .", 
            "title": "Online"
        }, 
        {
            "location": "/documentation/visualization/#local", 
            "text": "To generate an image locally you require the  graphviz  tool. See  graphviz.org  on how to\ninstall it. On mac you can use  brew .  brew install graphviz  Using the  dot  command you can then create an SVG by running:  dot -v -Tsvg -O graph.dot", 
            "title": "Local"
        }, 
        {
            "location": "/documentation/visualization/#in-application", 
            "text": "Alternatively you can use  graphviz-java  to generate the SVG in your code:  import   guru.nidi.graphviz.engine. { Format ,   Graphviz }  import   guru.nidi.graphviz.parse.Parser  val   g   =   Parser . read ( recipe . getRecipeVisualization )  Graphviz . fromGraph ( g ). render ( Format . SVG ). toString", 
            "title": "In application"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/", 
            "text": "Declare, verify and execute microservices-based process flows with Baker\n\n\nScale By the Bay 2017, San Francisco\n\n\nNikola Kasev | ING Bank\n\n\n\n\n\n\n\n\n\n\nGlobal Financial Institution in Over 40 Countries\n\n\nSoftware Company\n with a Banking License\n\n\nMicroservices Architecture\n\n\n\n\nOur Challenge\n\n\nInteract with 12 Different Systems\n\n\nA Flow of 27 Steps\n\n\nFrom 2 minutes to 6 hours\n\n\n\n\n\n\nAfraid to Change the Application Code\n\n\n\n\n\n\nFunctionality Breaks Unexpectedly\n\n\n\n\n\n\nSlow Time to Market\n\n\n\n\nHow to Turn This Around?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSimplify\n\n\nDomain Specific Language for Orchestration Flows\n\n\nDeclarative\n\n\nEasy to Change\n\n\n\n\n\n\nRecipes\n\n\nInteractions\n\n\nIngredients\n\n\nEvents\n\n\n\n\n\n\nCommunicate\n\n\nVisualize your code\n\n\nNon-IT understand as well\n\n\nReason About Comfortably\n\n\n\n\n\n\n\n\n\n\n\n\nLet's Cook Some Cr\u00eapes!\n\n\n\n\nGood to Know\n\n\n\n\nShort-lived vs. long-running flows\n\n\n\n\nState is taken care of:\n\n\n\n\nCassandra for persistent storage\n\n\nIngredients encrypted by default\n\n\nState recovered automatically\n\n\n\n\n\n\nWhen failure occurs:\n\n\n\n\nBaker retries technical failures with exponential backoff\n\n\nWorks well with \nidempotent\n services\n\n\nDeal with functional failure in your recipe\n\n\n\n\n\n\nBaker Capability Matrix:\n\n\n\n\nInvestigate not one, not two, but \nall business processes\n in your company\n\n\nWhere do you see re-use?\n\n\nMap using MoSCoW\n^4\n to give importance (M = 10, S = 5, C = 2, W = 1)\n\n\n\n\n\n\n\n\n\n\n\n\nChecking Account\n\n\nSavings Account\n\n\nCustomer Onboarding\n\n\n\n\n\n\n\n\n\n\nVerify Identity\n\n\nVerify Identity\n\n\nVerify Identity\n\n\n\n\n\n\nRegister Individual\n\n\nRegister Individual\n\n\nRegister Individual\n\n\n\n\n\n\nOpen \nChecking\n Account\n\n\nOpen \nSavings\n Account\n\n\nn/a\n\n\n\n\n\n\nIssue Debit Card\n\n\nn/a\n\n\nn/a\n\n\n\n\n\n\nSend Message\n\n\nSend Message\n\n\nSend Message\n\n\n\n\n\n\nRegister Ownerhip\n\n\nRegister Ownership\n\n\nn/a\n\n\n\n\n\n\n\n\n\n\n\n\nhttps://github.com/ing-bank/baker\n\n\n\n\nWhy Petri net?\n^3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDesign-time\n\n\n\n\nval\n \nregisterIndividual\n \n=\n \nInteraction\n(\n\n  \nname\n \n=\n \nRegisterIndividual\n,\n\n  \ninputIngredients\n \n=\n \nSeq\n(\nname\n,\n \naddress\n),\n\n  \noutput\n \n=\n \nSeq\n(\nregisterIndividualSuccessful\n,\n \nregisterIndividualFailed\n)\n\n\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nval\n \nrecipe\n \n=\n \nRecipe\n(\nOpenAccountRecipe\n)\n\n  \n.\nwithInteractions\n(\n\n    \nassignAccount\n,\n\n    \ngetAccount\n,\n\n    \nregisterIndividual\n)\n\n\n\n\n\n\n\n\n\n\n\nval\n \nrecipe\n \n=\n \nRecipe\n(\nOpenAccountRecipe\n)\n\n  \n.\nwithInteractions\n(\n\n    \nassignAccount\n,\n\n    \ngetAccount\n.\nwithRequiredEvent\n(\ntermsAndConditionsAccepted\n),\n\n    \nregisterIndividual\n)\n\n  \n.\nwithSensoryEvents\n(\n\n    \ntermsAndConditionsAccepted\n,\n\n    \nindividualInformationSubmitted\n)\n\n\n\n\n\n\n\n\n\n\n\nRun-time\n\n\n\n\n//for each process instance, bake the recipe\n\n\nbaker\n.\nbake\n(\nprocessId\n);\n\n\n//notify Baker when events occur\n\n\nbaker\n.\nprocessEvent\n(\nprocessId\n,\n \nindividualInformationSubmitted\n.\ninstance\n(\nname\n,\n \naddress\n));\n\n\nbaker\n.\nprocessEvent\n(\nprocessId\n,\n \ntermsAndConditionsAccepted\n.\ninstance\n());\n\n\n\n//retrieve ingredients stored in the accumulated state\n\n\nassert\n(\nbaker\n.\ngetIngredients\n(\nprocessId\n).\nget\n(\ncustomerId\n).\nequals\n(\ncustomerId\n));\n\n\nassert\n(\nbaker\n.\ngetIngredients\n(\nprocessId\n).\nget\n(\niban\n).\nequals\n(\niban\n));\n\n\n\n//retrieve all events that have occurred\n\n\nbaker\n.\nevents\n(\nprocessId\n)\n\n\n\n\n\n\n\n\n\n\n\nval groceriesDone = new Event(\"GroceriesDone\", Seq(milk, eggs, flour, butter, creme), Some(1))\n\n\nval mixFirstThree = Interaction(\n  name = \"MixFirstThree\",\n  inputIngredients = Seq(milk, eggs, flour),\n  output = Seq(batterMixed)\n)\n\n\nval mixFirstThreeImpl = mixFirstThree implement {\n  (milk: String, eggs: String, flour: String) =\n\n    println(s\"mixing $milk, $eggs, and $flour\")\n    batterMixed.instance(\"batter\")\n}\n\n\n\n\nI love cooking food\n and for the rest of the talk I'll be using examples from there. It's very \nsimilar to our industry\n: long hours, hard work, and delivering experiences to our customers.\n\n\nHave you been woken up at 3 o'clock in the morning on a \nSaturday morning\n after a night of partying, having to go to the war room and resolve an application incident. I've been there. When I remember the cold of the \nairconditioners\n, it still \nmakes me shiver\n.\n\n\nIf we are building microservices or a monolith or any type of application in general we are \nserving business logic to our clients\n. So no matter what, we cannot escape the \narchitectural discussion\n. If we are not careful of how we architect our applications we end up serving a bad meal to our clients.", 
            "title": "Declare, verify and execute microservices-based process flows with Baker"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#declare-verify-and-execute-microservices-based-process-flows-with-baker", 
            "text": "", 
            "title": "Declare, verify and execute microservices-based process flows with Baker"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#scale-by-the-bay-2017-san-francisco", 
            "text": "", 
            "title": "Scale By the Bay 2017, San Francisco"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#nikola-kasev-ing-bank", 
            "text": "", 
            "title": "Nikola Kasev | ING Bank"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#global-financial-institution-in-over-40-countries", 
            "text": "", 
            "title": "Global Financial Institution in Over 40 Countries"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#software-company-with-a-banking-license", 
            "text": "", 
            "title": "Software Company with a Banking License"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#microservices-architecture", 
            "text": "", 
            "title": "Microservices Architecture"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#our-challenge", 
            "text": "", 
            "title": "Our Challenge"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#interact-with-12-different-systems", 
            "text": "", 
            "title": "Interact with 12 Different Systems"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#a-flow-of-27-steps", 
            "text": "", 
            "title": "A Flow of 27 Steps"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#from-2-minutes-to-6-hours", 
            "text": "", 
            "title": "From 2 minutes to 6 hours"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#afraid-to-change-the-application-code", 
            "text": "", 
            "title": "Afraid to Change the Application Code"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#functionality-breaks-unexpectedly", 
            "text": "", 
            "title": "Functionality Breaks Unexpectedly"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#slow-time-to-market", 
            "text": "", 
            "title": "Slow Time to Market"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#how-to-turn-this-around", 
            "text": "", 
            "title": "How to Turn This Around?"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#simplify", 
            "text": "", 
            "title": "Simplify"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#domain-specific-language-for-orchestration-flows", 
            "text": "", 
            "title": "Domain Specific Language for Orchestration Flows"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#declarative", 
            "text": "", 
            "title": "Declarative"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#easy-to-change", 
            "text": "", 
            "title": "Easy to Change"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#recipes", 
            "text": "", 
            "title": "Recipes"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#interactions", 
            "text": "", 
            "title": "Interactions"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#ingredients", 
            "text": "", 
            "title": "Ingredients"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#communicate", 
            "text": "", 
            "title": "Communicate"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#visualize-your-code", 
            "text": "", 
            "title": "Visualize your code"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#non-it-understand-as-well", 
            "text": "", 
            "title": "Non-IT understand as well"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#reason-about-comfortably", 
            "text": "", 
            "title": "Reason About Comfortably"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#lets-cook-some-crepes", 
            "text": "", 
            "title": "Let's Cook Some Cr\u00eapes!"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#good-to-know", 
            "text": "", 
            "title": "Good to Know"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#short-lived-vs-long-running-flows", 
            "text": "", 
            "title": "Short-lived vs. long-running flows"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#state-is-taken-care-of", 
            "text": "Cassandra for persistent storage  Ingredients encrypted by default  State recovered automatically", 
            "title": "State is taken care of:"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#when-failure-occurs", 
            "text": "Baker retries technical failures with exponential backoff  Works well with  idempotent  services  Deal with functional failure in your recipe    Baker Capability Matrix:   Investigate not one, not two, but  all business processes  in your company  Where do you see re-use?  Map using MoSCoW ^4  to give importance (M = 10, S = 5, C = 2, W = 1)       Checking Account  Savings Account  Customer Onboarding      Verify Identity  Verify Identity  Verify Identity    Register Individual  Register Individual  Register Individual    Open  Checking  Account  Open  Savings  Account  n/a    Issue Debit Card  n/a  n/a    Send Message  Send Message  Send Message    Register Ownerhip  Register Ownership  n/a", 
            "title": "When failure occurs:"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#httpsgithubcoming-bankbaker", 
            "text": "", 
            "title": "https://github.com/ing-bank/baker"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#why-petri-net3", 
            "text": "", 
            "title": "Why Petri net?^3"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#design-time", 
            "text": "val   registerIndividual   =   Interaction ( \n   name   =   RegisterIndividual , \n   inputIngredients   =   Seq ( name ,   address ), \n   output   =   Seq ( registerIndividualSuccessful ,   registerIndividualFailed )  )          val   recipe   =   Recipe ( OpenAccountRecipe ) \n   . withInteractions ( \n     assignAccount , \n     getAccount , \n     registerIndividual )      val   recipe   =   Recipe ( OpenAccountRecipe ) \n   . withInteractions ( \n     assignAccount , \n     getAccount . withRequiredEvent ( termsAndConditionsAccepted ), \n     registerIndividual ) \n   . withSensoryEvents ( \n     termsAndConditionsAccepted , \n     individualInformationSubmitted )", 
            "title": "Design-time"
        }, 
        {
            "location": "/presentations/ScaleByTheBay-18-Nov-2017/#run-time", 
            "text": "//for each process instance, bake the recipe  baker . bake ( processId );  //notify Baker when events occur  baker . processEvent ( processId ,   individualInformationSubmitted . instance ( name ,   address ));  baker . processEvent ( processId ,   termsAndConditionsAccepted . instance ());  //retrieve ingredients stored in the accumulated state  assert ( baker . getIngredients ( processId ). get ( customerId ). equals ( customerId ));  assert ( baker . getIngredients ( processId ). get ( iban ). equals ( iban ));  //retrieve all events that have occurred  baker . events ( processId )      val groceriesDone = new Event(\"GroceriesDone\", Seq(milk, eggs, flour, butter, creme), Some(1))  val mixFirstThree = Interaction(\n  name = \"MixFirstThree\",\n  inputIngredients = Seq(milk, eggs, flour),\n  output = Seq(batterMixed)\n)  val mixFirstThreeImpl = mixFirstThree implement {\n  (milk: String, eggs: String, flour: String) = \n    println(s\"mixing $milk, $eggs, and $flour\")\n    batterMixed.instance(\"batter\")\n}   I love cooking food  and for the rest of the talk I'll be using examples from there. It's very  similar to our industry : long hours, hard work, and delivering experiences to our customers.  Have you been woken up at 3 o'clock in the morning on a  Saturday morning  after a night of partying, having to go to the war room and resolve an application incident. I've been there. When I remember the cold of the  airconditioners , it still  makes me shiver .  If we are building microservices or a monolith or any type of application in general we are  serving business logic to our clients . So no matter what, we cannot escape the  architectural discussion . If we are not careful of how we architect our applications we end up serving a bad meal to our clients.", 
            "title": "Run-time"
        }, 
        {
            "location": "/presentations/baker-pitch/", 
            "text": "[fit] Orchestration Logic is Hard to Change\n\n\n\n\nBaker is a Java Library\n\n\nDeclare the Logic Like a Recipe\n\n\nVisualize the Logic\n\n\nDon't Worry About Retries and State\n\n\n\n\n\n\n\n\nRapid Time to Market\n\n\nLess Incidents\n\n\nBusiness and IT Speak the Same Language\n\n\n\n\nUnder the Hood\n\n\nDSL for Recipes\n\n\nActor Model with Petri nets\n\n\nEvent-Driven Architecture\n\n\n\n\n```java, [.highlight: 3,4,6]\nreturn new Recipe(\"DemoAtTwitterHQ\").\n        withInteractions(\n                of(AssignAccount.class),\n                of(GetAccount.class).\n                        withRequiredEvent(TermsAndConditionsAccepted.class),\n                of(RegisterIndividual.class)).\n        withSensoryEvents(\n                TermsAndConditionsAccepted.class,\n                IndividualInformationSubmitted.class);\n}\n\n---\n\n```java\n//notify Baker when events occur\nbaker.processEvent(processId, new SensoryEvents.IndividualInformationSubmitted(name, address));\nbaker.processEvent(processId, new SensoryEvents.TermsAndConditionsAccepted());", 
            "title": "[fit] Orchestration Logic is Hard to Change"
        }, 
        {
            "location": "/presentations/baker-pitch/#fit-orchestration-logic-is-hard-to-change", 
            "text": "", 
            "title": "[fit] Orchestration Logic is Hard to Change"
        }, 
        {
            "location": "/presentations/baker-pitch/#baker-is-a-java-library", 
            "text": "", 
            "title": "Baker is a Java Library"
        }, 
        {
            "location": "/presentations/baker-pitch/#declare-the-logic-like-a-recipe", 
            "text": "", 
            "title": "Declare the Logic Like a Recipe"
        }, 
        {
            "location": "/presentations/baker-pitch/#visualize-the-logic", 
            "text": "", 
            "title": "Visualize the Logic"
        }, 
        {
            "location": "/presentations/baker-pitch/#dont-worry-about-retries-and-state", 
            "text": "", 
            "title": "Don't Worry About Retries and State"
        }, 
        {
            "location": "/presentations/baker-pitch/#rapid-time-to-market", 
            "text": "", 
            "title": "Rapid Time to Market"
        }, 
        {
            "location": "/presentations/baker-pitch/#less-incidents", 
            "text": "", 
            "title": "Less Incidents"
        }, 
        {
            "location": "/presentations/baker-pitch/#business-and-it-speak-the-same-language", 
            "text": "", 
            "title": "Business and IT Speak the Same Language"
        }, 
        {
            "location": "/presentations/baker-pitch/#under-the-hood", 
            "text": "", 
            "title": "Under the Hood"
        }, 
        {
            "location": "/presentations/baker-pitch/#dsl-for-recipes", 
            "text": "", 
            "title": "DSL for Recipes"
        }, 
        {
            "location": "/presentations/baker-pitch/#actor-model-with-petri-nets", 
            "text": "", 
            "title": "Actor Model with Petri nets"
        }, 
        {
            "location": "/presentations/baker-pitch/#event-driven-architecture", 
            "text": "```java, [.highlight: 3,4,6]\nreturn new Recipe(\"DemoAtTwitterHQ\").\n        withInteractions(\n                of(AssignAccount.class),\n                of(GetAccount.class).\n                        withRequiredEvent(TermsAndConditionsAccepted.class),\n                of(RegisterIndividual.class)).\n        withSensoryEvents(\n                TermsAndConditionsAccepted.class,\n                IndividualInformationSubmitted.class);\n} ---\n\n```java\n//notify Baker when events occur\nbaker.processEvent(processId, new SensoryEvents.IndividualInformationSubmitted(name, address));\nbaker.processEvent(processId, new SensoryEvents.TermsAndConditionsAccepted());", 
            "title": "Event-Driven Architecture"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/", 
            "text": "Declare, verify and execute microservices-based process flows with Baker\n\n\nhttp://github.com/nikolakasev | ING\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSymptoms of a Failing Restaurant\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSymptoms of a Failing (Microservices) Architecture\n\n\n\n\n\n\nAfraid to change the application code\n\n\n\n\n\n\nFunctionality breaks unexpectedly\n\n\n\n\n\n\nSlow time to market\n\n\n\n\nHow to turn this around?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSimplify\n\n\nDomain Specific Language for orchestration flows\n\n\nDeclarative\n\n\nEasy to change\n\n\n\n\n\n\nReuse\n\n\nRecipes\n\n\nInteractions\n\n\nIngredients\n\n\nEvents\n\n\n\n\n\n\nCommunicate\n\n\nVisualize your code\n\n\nNon-IT understand as well\n\n\nReason About Comfortably\n\n\n\n\nDesign-time\n\n\n\n\n```[.highlight: 1,6,7]\npublic interface RegisterIndividual extends Interaction {\n    @FiresEvent(oneOf = {RegisterIndividualSuccessful.class,\n            RegisterIndividualFailed.class})\n    RegisterIndividualOutcome apply(\n            @ProcessId String processId,\n            @RequiresIngredient(\"name\") String name,\n            @RequiresIngredient(\"address\") String address\n    );\n}\n\n\n---\n\n```[.highlight: 2,3]\npublic interface RegisterIndividual extends Interaction {\n    @FiresEvent(oneOf = {RegisterIndividualSuccessful.class,\n            RegisterIndividualFailed.class})\n    RegisterIndividualOutcome apply(\n            @ProcessId String processId,\n            @RequiresIngredient(\nname\n) String name,\n            @RequiresIngredient(\naddress\n) String address\n    );\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```java, [.highlight: 3-6]\npublic Recipe get(){\n    return new Recipe(\"MuConf2017Demo\").\n            withInteractions(\n                    of(AssignAccount.class),\n                    of(GetAccount.class),\n                    of(RegisterIndividual.class));\n}\n\n---\n\n![fit](recipe-no-sensory.png)\n\n---\n\n```java, [.highlight: 5, 7-9]\nreturn new Recipe(\nMuConf2017Demo\n).\n        withInteractions(\n                of(AssignAccount.class),\n                of(GetAccount.class).\n                        withRequiredEvent(TermsAndConditionsAccepted.class),\n                of(RegisterIndividual.class)).\n        withSensoryEvents(\n                TermsAndConditionsAccepted.class,\n                IndividualInformationSubmitted.class);\n}\n\n\n\n\n\n\n\n\n\nRun-time\n\n\n\n\n```java, [.highlight: 2,4,5,8,9,13]\n//for each process instance, bake the recipe\nbaker.bake(processId);\n//notify Baker when events occur\nbaker.processEvent(processId, new SensoryEvents.IndividualInformationSubmitted(name, address));\nbaker.processEvent(processId, new SensoryEvents.TermsAndConditionsAccepted());\n\n\n//retrieve ingredients stored in the accumulated state\nassert(baker.getIngredients(processId).get(\"customerId\").equals(customerId));\nassert(baker.getIngredients(processId).get(\"iban\").equals(iban));\n\n\n//retrieve all events that have occurred\nSet\n occurredEvents = new HashSet\n(\n        baker.getEvents(processId).getEventNameList()\n);\n```\n\n\n\n\n\n\n\n\nUnder the Hood\n\n\n\n\nWhy Scala?\n\n\n\n\nBest fit for developing DSLs\n^1\n on the JVM\n\n\nCompile-time recipe validation\n\n\nType safety\n\n\n\n\n\n\nWhy Akka?\n\n\n\n\nEvent Sourcing\n^2\n (events can be replayed)\n\n\nPersistent actors (with Cassandra)\n\n\nDistributed actors across machines (with cluster sharding)\n\n\n\n\n\n\nWhy Petri net?\n^3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBest Practices\n\n\n\n\nShort-lived vs. long-running flows\n\n\n\n\nState is taken care of:\n\n\n\n\nCassandra for persistent storage\n\n\nIngredients encrypted by default\n\n\nState recovered automatically\n\n\n\n\n\n\nRun Baker inside of your API\n\n\n\"Smart endpoints and dumb pipes\"\n\n\n\n\nWhen failure occurs:\n\n\n\n\nBaker retries technical failures with exponential backoff\n\n\nWorks well with \nidempotent\n services\n\n\nDeal with functional failure in your recipe\n\n\n\n\n\n\nBaker Capability Matrix:\n\n\n\n\nInvestigate not one, not two, but \nall business processes\n in your company\n\n\nWhere do you see re-use?\n\n\nMap using MoSCoW\n^4\n to give importance (M = 10, S = 5, C = 2, W = 1)\n\n\n\n\n\n\n\n\n\n\n\n\nChecking Account\n\n\nSavings Account\n\n\nCustomer Onboarding\n\n\n\n\n\n\n\n\n\n\nVerify Identity\n\n\nVerify Identity\n\n\nVerify Identity\n\n\n\n\n\n\nRegister Individual\n\n\nRegister Individual\n\n\nRegister Individual\n\n\n\n\n\n\nOpen \nChecking\n Account\n\n\nOpen \nSavings\n Account\n\n\nn/a\n\n\n\n\n\n\nIssue Debit Card\n\n\nn/a\n\n\nn/a\n\n\n\n\n\n\nSend Message\n\n\nSend Message\n\n\nSend Message\n\n\n\n\n\n\nRegister Product Owner\n\n\nRegister Product Owner\n\n\nn/a\n\n\n\n\n\n\n\n\n\n\n\n\nhttps://github.com/ing-bank/baker\n\n\n\n\n\n\n\n\nSpeed of change matters to anyone building software. Many engineering teams have identified Microservices as an important component of this architectural approach to designing more flexible systems that can meet the needs of their fast changing businesses. Applying this approach however, is hard. And ideas and practices are still very much evolving. To help with that, we've launched muCon - a conference to learn about emerging technologies and approaches, share challenges and evolve practices and ideas.\n\n\n\n\nTheir applications are built on top of microservices. If there careful enough their application serve bad meals. \n\n\nIf we are building microservices or a monolith or any type of service in general we are serving business logic to our clients. So no matter what we can not escape the architectural discussion.\nIf we are not careful of how we architect our applications we end up serving bad meals.\n\n\n\n\nI love cooking food\n and for the rest of the talk I'll be using analogies from there. It's very \nsimilar to our industry\n: long hours, hard work, and delivering experiences to our customers.\n\n\nHave you been woken up at 3 o'clock in the morning on a \nSaturday morning\n after a night of partying, having to go to the war room and resolve an application incident. I've been there. When I remember the cold of the \nairconditioners\n, it still \nmakes me shiver\n.\n\n\nIf we are building microservices or a monolith or any type of application in general we are \nserving business logic to our clients\n. So no matter what, we cannot escape the \narchitectural discussion\n. If we are not careful of how we architect our applications we end up serving a bad meal to our clients.", 
            "title": "Declare, verify and execute microservices-based process flows with Baker"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#declare-verify-and-execute-microservices-based-process-flows-with-baker", 
            "text": "", 
            "title": "Declare, verify and execute microservices-based process flows with Baker"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#httpgithubcomnikolakasev-ing", 
            "text": "", 
            "title": "http://github.com/nikolakasev | ING"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#symptoms-of-a-failing-restaurant", 
            "text": "", 
            "title": "Symptoms of a Failing Restaurant"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#symptoms-of-a-failing-microservices-architecture", 
            "text": "", 
            "title": "Symptoms of a Failing (Microservices) Architecture"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#afraid-to-change-the-application-code", 
            "text": "", 
            "title": "Afraid to change the application code"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#functionality-breaks-unexpectedly", 
            "text": "", 
            "title": "Functionality breaks unexpectedly"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#slow-time-to-market", 
            "text": "", 
            "title": "Slow time to market"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#how-to-turn-this-around", 
            "text": "", 
            "title": "How to turn this around?"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#simplify", 
            "text": "", 
            "title": "Simplify"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#domain-specific-language-for-orchestration-flows", 
            "text": "", 
            "title": "Domain Specific Language for orchestration flows"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#declarative", 
            "text": "", 
            "title": "Declarative"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#easy-to-change", 
            "text": "", 
            "title": "Easy to change"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#reuse", 
            "text": "", 
            "title": "Reuse"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#recipes", 
            "text": "", 
            "title": "Recipes"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#interactions", 
            "text": "", 
            "title": "Interactions"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#ingredients", 
            "text": "", 
            "title": "Ingredients"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#events", 
            "text": "", 
            "title": "Events"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#communicate", 
            "text": "", 
            "title": "Communicate"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#visualize-your-code", 
            "text": "", 
            "title": "Visualize your code"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#non-it-understand-as-well", 
            "text": "", 
            "title": "Non-IT understand as well"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#reason-about-comfortably", 
            "text": "", 
            "title": "Reason About Comfortably"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#design-time", 
            "text": "```[.highlight: 1,6,7]\npublic interface RegisterIndividual extends Interaction {\n    @FiresEvent(oneOf = {RegisterIndividualSuccessful.class,\n            RegisterIndividualFailed.class})\n    RegisterIndividualOutcome apply(\n            @ProcessId String processId,\n            @RequiresIngredient(\"name\") String name,\n            @RequiresIngredient(\"address\") String address\n    );\n}  ---\n\n```[.highlight: 2,3]\npublic interface RegisterIndividual extends Interaction {\n    @FiresEvent(oneOf = {RegisterIndividualSuccessful.class,\n            RegisterIndividualFailed.class})\n    RegisterIndividualOutcome apply(\n            @ProcessId String processId,\n            @RequiresIngredient( name ) String name,\n            @RequiresIngredient( address ) String address\n    );\n}         ```java, [.highlight: 3-6]\npublic Recipe get(){\n    return new Recipe(\"MuConf2017Demo\").\n            withInteractions(\n                    of(AssignAccount.class),\n                    of(GetAccount.class),\n                    of(RegisterIndividual.class));\n} ---\n\n![fit](recipe-no-sensory.png)\n\n---\n\n```java, [.highlight: 5, 7-9]\nreturn new Recipe( MuConf2017Demo ).\n        withInteractions(\n                of(AssignAccount.class),\n                of(GetAccount.class).\n                        withRequiredEvent(TermsAndConditionsAccepted.class),\n                of(RegisterIndividual.class)).\n        withSensoryEvents(\n                TermsAndConditionsAccepted.class,\n                IndividualInformationSubmitted.class);\n}", 
            "title": "Design-time"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#run-time", 
            "text": "```java, [.highlight: 2,4,5,8,9,13]\n//for each process instance, bake the recipe\nbaker.bake(processId);\n//notify Baker when events occur\nbaker.processEvent(processId, new SensoryEvents.IndividualInformationSubmitted(name, address));\nbaker.processEvent(processId, new SensoryEvents.TermsAndConditionsAccepted());  //retrieve ingredients stored in the accumulated state\nassert(baker.getIngredients(processId).get(\"customerId\").equals(customerId));\nassert(baker.getIngredients(processId).get(\"iban\").equals(iban));  //retrieve all events that have occurred\nSet  occurredEvents = new HashSet (\n        baker.getEvents(processId).getEventNameList()\n);\n```", 
            "title": "Run-time"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#under-the-hood", 
            "text": "", 
            "title": "Under the Hood"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#why-scala", 
            "text": "Best fit for developing DSLs ^1  on the JVM  Compile-time recipe validation  Type safety", 
            "title": "Why Scala?"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#why-akka", 
            "text": "Event Sourcing ^2  (events can be replayed)  Persistent actors (with Cassandra)  Distributed actors across machines (with cluster sharding)", 
            "title": "Why Akka?"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#why-petri-net3", 
            "text": "", 
            "title": "Why Petri net?^3"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#best-practices", 
            "text": "", 
            "title": "Best Practices"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#short-lived-vs-long-running-flows", 
            "text": "", 
            "title": "Short-lived vs. long-running flows"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#state-is-taken-care-of", 
            "text": "Cassandra for persistent storage  Ingredients encrypted by default  State recovered automatically", 
            "title": "State is taken care of:"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#run-baker-inside-of-your-api", 
            "text": "", 
            "title": "Run Baker inside of your API"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#smart-endpoints-and-dumb-pipes", 
            "text": "", 
            "title": "\"Smart endpoints and dumb pipes\""
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#when-failure-occurs", 
            "text": "Baker retries technical failures with exponential backoff  Works well with  idempotent  services  Deal with functional failure in your recipe    Baker Capability Matrix:   Investigate not one, not two, but  all business processes  in your company  Where do you see re-use?  Map using MoSCoW ^4  to give importance (M = 10, S = 5, C = 2, W = 1)       Checking Account  Savings Account  Customer Onboarding      Verify Identity  Verify Identity  Verify Identity    Register Individual  Register Individual  Register Individual    Open  Checking  Account  Open  Savings  Account  n/a    Issue Debit Card  n/a  n/a    Send Message  Send Message  Send Message    Register Product Owner  Register Product Owner  n/a", 
            "title": "When failure occurs:"
        }, 
        {
            "location": "/presentations/muCon-London-7-Nov-2017/#httpsgithubcoming-bankbaker", 
            "text": "Speed of change matters to anyone building software. Many engineering teams have identified Microservices as an important component of this architectural approach to designing more flexible systems that can meet the needs of their fast changing businesses. Applying this approach however, is hard. And ideas and practices are still very much evolving. To help with that, we've launched muCon - a conference to learn about emerging technologies and approaches, share challenges and evolve practices and ideas.   Their applications are built on top of microservices. If there careful enough their application serve bad meals.   If we are building microservices or a monolith or any type of service in general we are serving business logic to our clients. So no matter what we can not escape the architectural discussion.\nIf we are not careful of how we architect our applications we end up serving bad meals.   I love cooking food  and for the rest of the talk I'll be using analogies from there. It's very  similar to our industry : long hours, hard work, and delivering experiences to our customers.  Have you been woken up at 3 o'clock in the morning on a  Saturday morning  after a night of partying, having to go to the war room and resolve an application incident. I've been there. When I remember the cold of the  airconditioners , it still  makes me shiver .  If we are building microservices or a monolith or any type of application in general we are  serving business logic to our clients . So no matter what, we cannot escape the  architectural discussion . If we are not careful of how we architect our applications we end up serving a bad meal to our clients.", 
            "title": "https://github.com/ing-bank/baker"
        }
    ]
}